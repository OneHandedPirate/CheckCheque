from functools import reduce

from src.services import utils


class RenderService:
    @staticmethod
    def render_menu_text(start: bool, name: str = "default") -> str:
        strings_to_render = []
        if start:
            strings_to_render.append(
                f"üññ –ü—Ä–∏–≤–µ—Ç, {name}. –Ø <b>CheckCheque</b> –±–æ—Ç, –≤–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
            )
        strings_to_render.append(
            "\nüî∏–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞\n"
            "üî∏–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é/–º–µ—Å—è—Ü/–≥–æ–¥\n"
            "üî∏–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —á–µ–∫–æ–≤\n"
            "üî∏–í—ã–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ë–î\n\n"
            "–î–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∂–º–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É."
        )
        return "".join(strings_to_render)

    def render_statistics(self, items: list, period: str) -> str | list:
        months = utils.MONTHS

        if not items:
            return "–ó–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ—Ç."
        strings_to_render = []
        match period:
            case "year":
                strings_to_render.append(f"üìÖ <b>{items[0][3]}</b>\n\n")
                for month in items:
                    strings_to_render.append(
                        f"<b>{months[month[2]]}</b>\n–ü–æ—Ö–æ–¥–æ–≤ –≤ –º–∞–≥–∞–∑: {month[1]}"
                        f"\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {month[0]}\n\n"
                    )
                strings_to_render.append(
                    f"------------------------------\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –≥–æ–¥: "
                    f"{sum([month[0] for month in items]):.2f}\n"
                )
                return "".join(strings_to_render)

            case "month":
                month, year = items[0][-1].split(".")
                strings_to_render.append(f"{months[month]} {year}–≥.\n\n")
                total = 0
                for indx, item in enumerate(items, 1):
                    item_str = ""
                    total += item[2]
                    item_str += f"<b>- {item[0]}</b>\n"
                    if item[1] != 1:
                        item_str += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {round(item[1], 3)}\n"
                    item_str += f"   –°—É–º–º–∞: {item[2]}\n"
                    strings_to_render.append(item_str)
                strings_to_render.append(
                    f"-------------------------\n<b>–ò—Ç–æ–≥–æ</b>: {total:.2f}"
                )
                return self.paginate_results_if_needed(strings_to_render)

            case "week":
                return self.render_checks(
                    items, first_string="üõí –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n", total=True
                )

            case "last":
                return self.render_checks(
                    items, first_string="üõí –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–µ–∫:\n\n"
                )

            case "day":
                return self.render_checks(
                    items,
                    first_string="üõí –í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏ –∑–∞ —Ç–∞–∫–æ–π-—Ç–æ –¥–µ–Ω—å:\n\n",
                    total=True,
                )

    def render_checks(
        self,
        items: list[tuple],
        first_string: str,
        total: bool = False,
    ) -> str:
        checks_to_render = [first_string]
        num = _sum = 0
        if total:
            _total = 0
        check_str = ""
        for indx, item in enumerate(items):
            if indx == 0 or indx > 0 and items[indx - 1][4] != item[4]:
                if indx != 0:
                    check_str += (
                        f"------------------\n<b>–°—É–º–º–∞: </b> "
                        f"{_sum:.2f}\n------------------\n\n"
                    )
                    if total:
                        _total += _sum
                    _sum = 0
                    checks_to_render.append(check_str)
                    check_str = ""
                date, time = item[4].split()
                date = ".".join(date.split("-")[::-1])
                check_str += f"üóìÔ∏è {date}\nüïì {time}\n\n"
                num = 0

            num += 1
            if item[2] != 1:
                check_str += (
                    f"<b>{num}) {item[0]}</b>\n–¶–µ–Ω–∞ –∑–∞ –µ–¥.: {item[1]}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item[2]}\n–°—É–º–º–∞: {item[3]}\n\n"
                )

            else:
                check_str += f"<b>{num}) {item[0]}</b>\n–¶–µ–Ω–∞: {item[3]}\n\n"

            _sum += float(item[3])
        check_str += (
            f"------------------\n<b>–°—É–º–º–∞: </b> {_sum:.2f}\n------------------\n\n"
        )
        checks_to_render.append(check_str)
        if total:
            _total += _sum
            checks_to_render.append(f"-----------------\n<b>–ò—Ç–æ–≥–æ</b>: {_total:.2f}\n")
        return self.paginate_results_if_needed(checks_to_render, total)

    @staticmethod
    def paginate_results_if_needed(
        strings_to_render: list[str], total: bool = True
    ) -> str | list[str]:
        if reduce(lambda x, y: x + len(y), strings_to_render, 0) > 1600:
            paginated_results = []
            current_page = 1
            current_string = (
                strings_to_render[0] + f"--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} ---\n\n"
            )
            items = strings_to_render[1:-1] if total else strings_to_render[1:]
            for indx, item in enumerate(items):
                if len(current_string) + len(item) < 1200:
                    current_string += item
                else:
                    if total:
                        current_string += strings_to_render[-1]
                    paginated_results.append(current_string)
                    current_page += 1
                    current_string = (
                        strings_to_render[0] + f"--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} ---\n\n"
                    )
                    current_string += item
            if total:
                current_string += strings_to_render[-1]
            paginated_results.append(current_string)
            return paginated_results
        return "".join(strings_to_render)
